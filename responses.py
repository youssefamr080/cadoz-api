import random
from typing import List, Dict, Optional, Union, Tuple

def generate_response(context: Dict, products: List[Dict], dialect: str = 'egy') -> str:
    """
    ูุงุฌูุฉ ููุญุฏุฉ ูุชูููุฏ ุฑุฏ ูุฏูู ูุฎุตุต ุจุงูููุฌุฉ ุงููุตุฑูุฉ ุจูุงุกู ุนูู ุงูุณูุงู ูุงูููุชุฌุงุช ุงูููุชุฑุญุฉ.
    """
    return friendly_message(context, products, dialect)

def friendly_message(context: Dict, products: List[Dict], dialect: str = 'egy') -> str:
    """
    ุจุชููุฏ ุฑุณุงูุฉ ูุฏูุฉ ูุตุฑูุฉ ุทุจูุนูุฉ ุจูุงุกู ุนูู ุงูุณูุงู ูุงูููุชุฌุงุช ุงูููุชุฑุญุฉ.
    
    ุงููุฏุฎูุงุช:
    - context: ูุงููุณ ููู ุงูููุงุณุจุฉุ ุงูููุนุ ุงูุนูุฑุ ุงูุงูุชูุงูุงุชุ ูุทุงู ุงูุณุนุฑ...
    - products: ูุงููุฉ ุงูููุชุฌุงุช ุงูููุชุฑุญุฉ (ูููู ุชููู ูุงุถูุฉ).
    - dialect: 'egy' (ูุตุฑู ุงูุชุฑุงุถู) ุฃู 'ar' (ูุตุญู).
    
    ุงููุฎุฑุฌุงุช:
    - ุฑุณุงูุฉ ูุฏูุฉ ุจุงูููุฌุฉ ุงููุตุฑูุฉ ููุงุณุจุฉ ููุณูุงู
    """
    # ุงุณุชุฎุฑุงุฌ ูู ุชูุงุตูู ุงูุณูุงู
    occasion = context.get('occasion')
    person_type = context.get('type')
    age_raw = context.get('age')
    interests = context.get('interests', [])
    price_range = context.get('price_range')
    urgency = context.get('urgency')
    relationship = context.get('relationship')
    time_of_day = get_time_of_day()
    user_name = context.get('user_name')
    return_customer = context.get('return_customer', False)
    products_count = len(products)
    previous_purchases = context.get('previous_purchases', [])
    
    # ูุนุงูุฌุฉ ุงูุนูุฑ (ุชุญููููุง ููุฆุฉ ุนูุฑูุฉ)
    age_category = get_age_category(age_raw)
    
    # ุงุฎุชูุงุฑ ููุท ุงูุฑุฏ - ุนุดุงู ูุถูู ุชููุน ุฃูุชุฑ
    response_style = get_response_style(context)

    # ุงุฎุชูุงุฑ ุงูุฑุฏ ุงูููุงุณุจ ุญุณุจ ูุฌูุฏ ููุชุฌุงุช ุฃู ูุง
    if not products:
        return get_no_results_message(context, response_style)
    
    # ุจูุงุก ุงูุฑุณุงูุฉ ุงูุฃุณุงุณูุฉ ุญุณุจ ุงูุณูุงู
    message = build_contextual_message(
        occasion=occasion,
        person_type=person_type,
        age_category=age_category,
        interests=interests,
        price_range=price_range,
        urgency=urgency,
        relationship=relationship,
        products_count=products_count,
        response_style=response_style,
        time_of_day=time_of_day,
        return_customer=return_customer,
        user_name=user_name,
        previous_purchases=previous_purchases
    )
    
    # ุฅุถุงูุฉ ุชุนุจูุฑ ุฃู ูุตูุญุฉ ุนุดูุงุฆูุฉ ููุชูููุน (ุจุณ ูุด ุฏุงูููุง)
    if random.random() < 0.8:
        message = add_random_enhancement(message, context, response_style)
    
    # ุฅุถุงูุฉ ุฅูููุฌู ููุงุณุจ ููุณูุงู (ุจุณ ูุด ูุชูุฑ)
    message = add_contextual_emojis(message, context)
    
    return message


def get_response_style(context: Dict) -> str:
    """
    ุจุชุฎุชุงุฑ ููุท/ุฃุณููุจ ุงูุฑุฏ ุจูุงุกู ุนูู ุงูุณูุงู ููุณุจุฉ ุนุดูุงุฆูุฉ
    ุนุดุงู ูุถูู ุชููุน ูุดุฎุตูุฉ ููุฑุฏูุฏ
    """
    # ุฃููุงุท ุงูุฑุฏ ุงููุฎุชููุฉ
    styles = ['ุญูุงุณู', 'ูุฏูุฏ', 'ูุฑุญ', 'ูุณุงุนุฏ', 'ุนููู']
    
    # ูู ุงูุนููู ุญุงูุชู ูุณุชุนุฌูุฉุ ูุฑูุฒ ุนูู ุงูุฃููุงุท ุงูุนูููุฉ ูุงูุณุฑูุนุฉ
    if context.get('urgency') and ('ุนุงุฌู' in context['urgency'] or 'ุณุฑูุน' in context['urgency']):
        styles = ['ุนููู', 'ูุณุงุนุฏ']
    
    # ูู ุงูููุงุณุจุฉ ุณุนูุฏุฉ ุฒู ุนูุฏ ูููุงุฏ ุฃู ุฎุทูุจุฉุ ูุฒูุฏ ุงูุญูุงุณ ูุงููุฑุญ
    if context.get('occasion'):
        occasion = context['occasion'].lower()
        if any(item in occasion for item in ['ุนูุฏ ูููุงุฏ', 'ุฎุทูุจุฉ', 'ูุฑุญ', 'ุฒูุงุฌ']):
            styles = ['ุญูุงุณู', 'ูุฑุญ', 'ูุฏูุฏ']
    
    # ูู ุงูุนููู ุฑุงุฌุนุ ูุฎููู ุฑุฏ ุฃูุซุฑ ุฃููุฉ ููุฏ
    if context.get('return_customer'):
        styles = ['ูุฏูุฏ', 'ูุฑุญ']
    
    # ุงุฎุชูุงุฑ ููุท ุนุดูุงุฆู ูู ุงูุฃููุงุท ุงูููุงุณุจุฉ
    return random.choice(styles)


def get_age_category(age: Optional[Union[int, str]]) -> Optional[str]:
    """ุจุชุญูู ุงูุนูุฑ ููุฆุฉ ุนูุฑูุฉ ุฃูุซุฑ ุชูุตูููุง"""
    if not age:
        return None
        
    # ุชุญููู ุงูุนูุฑ ูุฑูู ูู ูุงู ูุต
    if isinstance(age, str):
        try:
            age_num = int(age.strip())
        except ValueError:
            return None
    else:
        age_num = age
        
    if age_num <= 2:
        return "ุฑุถุน"
    elif age_num <= 5:
        return "ุฃุทูุงู ุตุบูุฑูู"
    elif age_num <= 12:
        return "ุฃุทูุงู"
    elif age_num <= 16:
        return "ูุฑุงูููู ุตุบูุฑูู"
    elif age_num <= 19:
        return "ูุฑุงูููู"
    elif age_num <= 25:
        return "ุดุจุงุจ"
    elif age_num <= 40:
        return "ุจุงูุบูู"
    elif age_num <= 60:
        return "ูุชูุณุทู ุงูุนูุฑ"
    elif age_num <= 75:
        return "ูุจุงุฑ ุงูุณู"
    else:
        return "ูุณููู"


def get_time_of_day() -> str:
    """
    ุจุชุญุฏุฏ ููุช ุงูููู ุนุดุงู ูุถุจุท ุงูุชุญูุฉ ุจุดูู ุฃูุถู
    """
    import datetime
    hour = datetime.datetime.now().hour
    
    if 5 <= hour < 12:
        return "ุตุจุงุญ"
    elif 12 <= hour < 17:
        return "ุธูุฑ"
    elif 17 <= hour < 22:
        return "ูุณุงุก"
    else:
        return "ููู"


def get_no_results_message(context: Dict, response_style: str = 'ูุณุงุนุฏ') -> str:
    """
    ุจุชุฌูุจ ุฑุณุงูุฉ ูุฎุตุตุฉ ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ููุชุฌุงุช.
    ุงูุฑุฏูุฏ ุจุชุชุบูุฑ ุญุณุจ ููุท ุงูุฑุฏ ูุงูุณูุงูุ ูุจุชูุฏู ุงูุชุฑุงุญุงุช ููุงุณุจุฉ ูุฐููุฉ.
    """
    # ุชุญุถูุฑ ูุงููุณ ูุญุชูู ูู ุฃููุงุท ุงูุฑุฏ ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ูุชุงุฆุฌ
    no_results_templates = {
        'ุญูุงุณู': [
            "ููุฃุณู ูููุด ุญุงุฌุงุช ูุชููุฑุฉ ุฏูููุชู ุจุณ ูุชูููุด! ๐ช ุฃูุง ููุง ุนุดุงู ุฃุณุงุนุฏู ููุงูู ุฃุญูู ูุฏูุฉ!",
            "ูุนูุฏูุงุด ุงููู ุงูุช ุนุงูุฒู ุจุงูุธุจุท ุญุงูููุงุ ุจุณ ุนูุฏู ุฃููุงุฑ ุชุงููุฉ ุฌุงูุฏุฉ ุฌุฏูุง! ๐ฅ",
            "ูู ุตุญูุญ ูููุด ูุชุงูุฌ ููู ุจุชุฏูุฑ ุนูููุ ุจุณ ูุชูุฃุณุด! ููู ุจุฏุงุฆู ุฑูุนุฉ ุนูุฏูุง ๐"
        ],
        'ูุฏูุฏ': [
            "ุขุณู ูุง ุตุฏูููุ ุงูุจุญุซ ูุด ูุงูู ุญุงุฌุฉ ุฏูููุชู ๐ ุจุณ ุชุนุงูู ูููุฑ ุณูุง ูู ุญููู ุชุงููุฉ..",
            "ูุนูุด ูููุด ุนูุฏูุง ุญุงุฌุฉ ุจุงูููุงุตูุงุช ุฏู ุญุงูููุง.. ุจุณ ุฃููุฏ ูููุงูู ุญุงุฌุฉ ุชุนุฌุจู ุจุฑุถู ๐",
            "ูุญุตูุด ูุตูุจ ูู ุงูุทูุจ ุฏูุ ุจุณ ุฃูุง ูุนุงู ูุญุฏ ูุง ููุงูู ุญุงุฌุฉ ุชูุงุณุจู ุชูุงู ๐ฏ"
        ],
        'ูุฑุญ': [
            "ูุง ูููู! ุฏูุฑุช ูู ูู ุญุชุฉ ููุด ูุงูู ุญุงุฌุฉ ุจุงูุถุจุท ูุฏู! ๐ ุจุณ ุนูุฏู ูุงู ููุฑุฉ ูุฌูููุฉ ุชุงููุฉ!",
            "ุฃุตู ุงูุญุงุฌุงุช ุฏู ุงููุงุณ ุจุชุฎุทููุง ุนูู ุทูู! ๐ ุทุจ ูุง ุชุฌุฑุจ ุญุงุฌุฉ ุชุงููุฉ ุฃุญููุ",
            "ุฏูุฑุช ูุนุงู ูุญุฏ ูุง ุฏูุฎุช ุฎุงูุต ๐คช ุจุณ ุจุฑุฏู ูููุด! ุชุนุงูู ูุฌุฑุจ ุญุงุฌุฉ ูุฎุชููุฉ..."
        ],
        'ูุณุงุนุฏ': [
            "ููุฃุณู ูุด ูุงูู ุญุงุฌุฉ ูุทุงุจูุฉ ูุทูุจู ุญุงูููุง ๐ ูููู ุชุฏููู ูุนูููุงุช ุฃูุชุฑ ุฃู ูุบูุฑ ุดููุฉ ูู ุงูููุงุตูุงุชุ",
            "ุงูุจุญุซ ูุฌุจุด ูุชุงูุฌ ููุงุณุจุฉ! ๐ค ูููู ูุบูุฑ ุงูุณุนุฑ ุฃู ุงููุฆุฉ ุนุดุงู ููุงูู ูุฏุงูุง ุฃุญุณูุ",
            "ูููุด ุญุงุฌุฉ ุจุงูุธุจุท ูุฏู ุญุงูููุง. ูููู ุฃูุชุฑุญ ุนููู ุจุนุถ ุงูุจุฏุงุฆู ูู ุชุญุจุ ๐"
        ],
        'ุนููู': [
            "ูููุด ูุชุงูุฌ ูุชุทุงุจูุฉ. ุฎูููุง ูุถุจุท ุงูุจุญุซ: ูููู ูุบูุฑ ูุทุงู ุงูุณุนุฑ ุฃู ูุดูู ูุฆุงุช ุชุงููุฉุ",
            "ุงูุจุญุซ ูุทูุนุด ูุชุงูุฌ. ุนุงูุฒ ุชุญุฏุฏ ูุฆุงุช ุฃู ุงูุชูุงูุงุช ูุฎุชููุฉุ",
            "ูุด ูุชููุฑ ุทูุจู ุญุงูููุง. ุชุนุงูู ูุนุฏู ุงููุนุงููุฑ: ููุน ุงูููุชุฌ ุฃู ุงูุณุนุฑ ุฃู ุงูููุงุณุจุฉุ"
        ]
    }
    
    # ุงูุชูุงุท ุงููุนูููุงุช ุงูุฃุณุงุณูุฉ ููุณูุงู
    occasion = context.get('occasion')
    person_type = context.get('type')
    price_range = context.get('price_range')
    interests = context.get('interests', [])
    user_name = context.get('user_name')
    
    # ุงุฎุชูุงุฑ ุฑุณุงูุฉ ุฃุณุงุณูุฉ ุญุณุจ ููุท ุงูุฑุฏ
    base_msg = random.choice(no_results_templates.get(response_style, no_results_templates['ูุณุงุนุฏ']))
    
    # ุจูุงุก ูุงุฆูุฉ ุงูุชุฑุงุญุงุช ุจุฏููุฉ ุฐููุฉ ุญุณุจ ุงูุณูุงู
    suggestions = []
    
    # ุงูุชุฑุงุญุงุช ุจุฏููุฉ ุญุณุจ ุงูููุงุณุจุฉ
    if occasion:
        occasion_suggestions = {
            'ุนูุฏ ูููุงุฏ': ["ุดูุช ุงูุดูุท ุงูุฌูุฏ ุงูุฌุฏูุฏุฉ ุนูุฏูุงุ", "ุงูุชุฌุฑุจุฉ ุงูุญูุงุชูุฉ ุฃุญูู ูู ุงููุฏุงูุง - ูุซูุงู ุชุฐุงูุฑ ุณูููุง ุฃู ูุบุงูุฑุฉุ"],
            'ุฒูุงุฌ': ["ุฃุทูู ุงููุทุจุฎ ุงูุดูู ุญุงูููุง ุนูููุง ุนุฑูุถ", "ุฃุฌูุฒุฉ ููุฑุจุงุฆูุฉ ุนูููุฉ ูููู ุชุจูู ุฃุญุณู ูู ุงูุฏูููุฑ!"],
            'ุชุฎุฑุฌ': ["ููุชุด ุฌุฏูุฏ ุฃู ุณุงุนุฉ ุญููุฉ ุฃุญุณู ูู ุงููุฏุงูุง ุงูุชูููุฏูุฉ", "ุฌูุงุฒ ูุงุจ ุชูุจ ุฃู ุชุงุจูุชุ"],
            'ููููุฏ ุฌุฏูุฏ': ["ุนูุฏูุง ููุงุจุณ ุฃุทูุงู ูุทู ุทุจูุนู 100%", "ุฃูุนุงุจ ุชุนููููุฉ ุฃุญุณู ูู ุงููุฏุงูุง ุงูุชูููุฏูุฉ"],
            'ุฎุทูุจุฉ': ["ุชุฐุงูุฑ ุณูุฑ ูููู ูุงุญุฏุ", "ุณูุณูุฉ ูุถุฉ ุฃู ุณุงุนุฉ ูููุฒุฉุ"]
        }
        
        for key in occasion_suggestions:
            if key in occasion.lower():
                suggestions.append(random.choice(occasion_suggestions[key]))
                break
        else:
            suggestions.append(f"ููู ูุฏุงูุง ุชุงููุฉ ูุชูุฑ ูููู ุชูุงุณุจ {occasion}")
    
    # ุงูุชุฑุงุญุงุช ุญุณุจ ุงูููุน ุฃู ุงูุฌูุณ
    if person_type:
        if any(word in person_type.lower() for word in ['ุจูุช', 'ุฃูุซู', 'ุณุช', 'ูุฏุงู', 'ุฒูุฌุฉ', 'ุฎุทูุจุฉ']):
            female_suggestions = [
                "ุดูุทุฉ ูุงุฑูุฉ ูู ุงููููููุดู ุงูุฌุฏูุฏ",
                "ุณูุงุฑู ุญุฑูุฑ ุฃููู ูุนููู",
                "ุทูู ุฅูุณุณูุงุฑุงุช ูุชูุงูู",
                "ุนุทุฑ ูุฑูุณุงูู ูู ุฃุญุฏุซ ุงูุชุดูููุงุช",
                "ูุฑููุงุช ุฃู ูููุงุฌ ูู ุจุฑุงูุฏุงุช ูุงุฎุฑุฉ"
            ]
            suggestions.append(random.choice(female_suggestions))
        elif any(word in person_type.lower() for word in ['ููุฏ', 'ุฐูุฑ', 'ุฑุงุฌู', 'ุฒูุฌ', 'ุฎุทูุจ']):
            male_suggestions = [
                "ูุญูุธุฉ ุฌูุฏ ูุงุฑูุฉ ุฃุตููุฉ",
                "ุณุงุนุฉ ูุฏ ููุงุณูู ุฃู ุฑูุงุถูุฉ",
                "ุจูุฑูููู ุฑุฌุงูู ูุงุฎุฑ",
                "ูููุต ูุงุฌูุงู ุฃู ููุงุณูู ุดูู",
                "ุฌุงุฏุฌุช ุชูููููุฌู ุนููู"
            ]
            suggestions.append(random.choice(male_suggestions))
    
    # ุงูุชุฑุงุญุงุช ุญุณุจ ุงูุงูุชูุงูุงุช
    if interests:
        interest_suggestions = {
            'ุฑูุงุถุฉ': ['ูููู ุชุดูู ููุงุจุณ ุฑูุงุถูุฉ ูุงุฑูุฉุ', 'ุณูุงุนุงุช ุจููุชูุซ ูุฎุตุตุฉ ููุฑูุงุถุฉุ'],
            'ููุณููู': ['ุณูุงุนุงุช ุนุงููุฉ ุงูุฌูุฏุฉ ุจุชูุฑู ูุชูุฑ', 'ุฌููุช ูุงุฑุฏ ูุดุฑุงุก ูููุฒู ุฃูููุงููุ'],
            'ูุฑุงุกุฉ': ['ูุชุจ ูุญุฏูุฏุฉ ุงูุทุจุนุงุช ุนูุฏูุง', 'ูุงุฑุฆ ูุชุจ ุฅููุชุฑููู'],
            'ุชูููููุฌูุง': ['ุงูุณุณูุงุฑุงุช ููุจุงูู ุฐููุฉ', 'ุณูุงุนุงุช ุฐููุฉ ุฃู ุณุงุนุฉ ุณูุงุฑุช'],
            'ุณูุฑ': ['ุดูุทุฉ ุณูุฑ ุนูููุฉ', 'ุฅูุณุณูุงุฑุงุช ุณูุฑ ูุฑูุญุฉ']
        }
        
        for interest in interests:
            for key in interest_suggestions:
                if key in interest.lower():
                    suggestions.append(random.choice(interest_suggestions[key]))
                    break
    
    # ุงูุชุฑุงุญุงุช ุญุณุจ ุงูุณุนุฑ
    if price_range:
        if any(word in price_range.lower() for word in ['ุฑุฎูุต', 'ุจุณูุท', 'ุชูููุฑ', 'ูููู']):
            suggestions.append("ูููู ูุดูู ูุฏุงูุง ุฃูุชุฑ ูู ูุทุงู ุณุนุฑ ุฃุนูู ุดููุฉุ")
        elif any(word in price_range.lower() for word in ['ุบุงูู', 'ูุงุฎุฑ', 'ุนุงูู']):
            suggestions.append("ุนูุฏูุง ููุชุฌุงุช ูููุฒุฉ ูู ูุฆุฉ ุฃุณุนุงุฑ ุฃูู ุจุฌูุฏุฉ ุนุงููุฉ ุจุฑุถู")
        else:
            suggestions.append("ุนูุฏูุง ููุชุฌุงุช ูู ูู ุงููุฆุงุช ุงูุณุนุฑูุฉ")
    
    # ุฏูุฌ ุงูุฑุณุงูุฉ ูุน ุงูุงูุชุฑุงุญุงุช ุจุทุฑููุฉ ุทุจูุนูุฉ
    if suggestions:
        # ุงุฎุชูุงุฑ ูู 1-2 ุงูุชุฑุงุญ ููุท ุนุดุงู ููุทููุด
        selected_suggestions = random.sample(suggestions, min(2, len(suggestions)))
        
        # ุฅุถุงูุฉ ุชุฑููุณุฉ ููุงูุชุฑุงุญุงุช
        suggestion_intros = [
            "ุทุจ ูุง ุชููุฑ ูู: ",
            "ุฃูุชุฑุญ ุนููู: ",
            "ุฃูุง ุดุงูู ุฅู ุฏู ูููู ูุนุฌุจู: ",
            "ูููู ุชุดูู: ",
            "ููุฑุฉ ูููุณุฉ: "
        ]
        
        suggestion_text = f"{random.choice(suggestion_intros)}{' ูููุงู '.join(selected_suggestions)}"
        
        # ุฅุถุงูุฉ ุชุดุฌูุน ูู ุงูููุงูุฉ
        encouragements = [
            " ุฅูู ุฑุฃููุ",
            " ุชุญุจ ุฃูุชุฑุญ ุญุงุฌุงุช ุชุงููุฉุ",
            " ูุง ุชุฑู ุฏูู ููุงุณุจููุ",
            " ุฃุนุชูุฏ ุฏู ูุชุนุฌุจู.",
            " ูุชุชุฑุฏุดุ Cadoz ุฏุงูููุง ูุนุงู!"
        ]
        
        # ุฃุถู ุงุณู ุงููุณุชุฎุฏู ูู ููุฌูุฏ (ูููุณุฉ ุดุฎุตูุฉ)
        if user_name:
            greeting = f" ูุง {user_name}"
        else:
            greeting = ""
            
        full_message = f"{base_msg} {suggestion_text}{random.choice(encouragements)}{greeting}"
    else:
        full_message = f"{base_msg} ูููู ุจุณ ุงูุช ุนุงูุฒ ุฅูู ุจุงูุธุจุท ูุฃูุง ูุธุจุทู ุนูู ุงูุขุฎุฑ!"
    
    return full_message


# --- ุชุฑุฌูุฉ ุงูุฃูุณุงู ููุนุฑุจู ---
CATEGORY_TRANSLATIONS = {
    'watches': 'ุณุงุนุงุช',
    'wallets': 'ูุญุงูุธ',
    'sunglasses': 'ูุธุงุฑุงุช ุดูุณ',
    'perfumes': 'ุนุทูุฑ',
    'spray': 'ุณุจุฑุงู',
    'accessories': 'ุฅูุณุณูุงุฑุงุช',
    'kids_toys': 'ุฃูุนุงุจ ุฃุทูุงู',
    'teddy_bears': 'ุฏุจุงุฏูุจ',
    'handbags': 'ุดูุท',
    'men': 'ุฑุฌุงูู',
    'women': 'ุญุฑููู',
    'kids': 'ุฃุทูุงู',
    'unisex': 'ููุฌููุน',
    'all': 'ุงููู',
}

def translate_category(cat):
    if not cat:
        return ''
    cat = str(cat).strip().lower()
    return CATEGORY_TRANSLATIONS.get(cat, cat)

def build_contextual_message(
    occasion: Optional[str], 
    person_type: Optional[str], 
    age_category: Optional[str], 
    interests: List[str], 
    price_range: Optional[str],
    urgency: Optional[str],
    relationship: Optional[str],
    products_count: int,
    response_style: str,
    time_of_day: str,
    return_customer: bool,
    user_name: Optional[str] = None,
    previous_purchases: Optional[List] = None
) -> str:
    message_parts = []  # ุฅุตูุงุญ: ูุฌุจ ุชุนุฑูููุง ููุง

    # ุจูุงุก ุงูุฑุณุงูุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช
    if products_count == 0:
        message_parts.append("ูููุด ููุชุฌุงุช ููุงุณุจุฉ ุฏูููุชู.")
    elif products_count == 1:
        message_parts.append("ูููุชูู ุงุฎุชูุงุฑ ูุงุญุฏ ููุชุงุฒ!")
    elif products_count <= 3:
        message_parts.append(f"ุฏูู ุฃุฌูุฏ {products_count} ุงุฎุชูุงุฑุงุช ูููู ุชุนุฌุจู!")
    else:
        message_parts.append(f"ุฏูู {products_count} ูุฏุงูุง ูุชููุนุฉ ุชูุฏุฑ ุชุฎุชุงุฑ ูููู!")

    # ุงุณุชุฎุฑุงุฌ ุงููุฆุงุช ุงูุฑุฆูุณูุฉ ูู ุงูููุชุฌุงุช (category/subCategory)
    categories_set = set()
    subcategories_set = set()
    if 'products' in locals() and products_count > 0:
        for prod in locals()['products']:
            cat = prod.get('category', '')
            subcat = prod.get('subCategory', '')
            if cat:
                categories_set.add(translate_category(cat))
            if subcat:
                subcategories_set.add(translate_category(subcat))
    # ูู ููู ุฃูุซุฑ ูู ูุฆุฉุ ุงุฐูุฑูู ุจุงูุนุฑุจู
    all_types = list(categories_set | subcategories_set)
    if all_types:
        if len(all_types) == 1:
            message_parts.append(f"( {all_types[0]} )")
        else:
            message_parts.append(f"({ ' ู '.join(all_types) })")

    # ุชุฎุตูุต ุงูุฑุณุงูุฉ ุญุณุจ ุงูุงูุชูุงูุงุช ุฃู ุงููุณู
    if interests:
        interests_ar = [translate_category(i) for i in interests]
        message_parts.append(f"ููุงุณุจุฉ ููู ุจูุญุจ {', '.join(interests_ar)}.")
    elif person_type:
        message_parts.append(f"ููุงุณุจุฉ ูู {person_type}.")
    elif occasion:
        message_parts.append(f"ููุงุณุจุฉ ูู {occasion}.")

    return " ".join(message_parts)

    """
    ุจุชุจูู ุฑุณุงูุฉ ูุชูุงููุฉ ุญุณุจ ุงูุณูุงู ูุนูุงุตุฑู ุงููุฎุชููุฉ
    ุงูุฑุณุงูุฉ ุจุชุถู ุฌุฒุก ุชุญูุฉุ ุฌุฒุก ููุฏูุฉุ ูุฌุฒุก ุชูุงุตูู ุญุณุจ ุงูุณูุงู
    """
    message_parts = []
    
    # ------------------ ุฅุถุงูุฉ ุชุญูุฉ ุญุณุจ ููุช ุงูููู ูุงููุณุชุฎุฏู ------------------
    greeting = build_greeting(time_of_day, user_name, return_customer, response_style)
    if greeting:
        message_parts.append(greeting)
    
    # ------------------ ุงุฎุชูุงุฑ ููุฏูุฉ ุงูุฑุณุงูุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช ูุฃุณููุจ ุงูุฑุฏ ------------------
    intro = get_products_intro(products_count, response_style)
    message_parts.append(intro)
    
    # ------------------ ุชุฎุตูุต ุงูุฑุณุงูุฉ ุญุณุจ ุงูููุงุณุจุฉ ------------------
    if occasion:
        occasion_phrase = get_occasion_phrase(occasion, response_style)
        if occasion_phrase:
            message_parts.append(occasion_phrase)
    
    # ------------------ ุฅุถุงูุฉ ููุน ุงูุดุฎุต ููุฆุฉ ุงูุนูุฑ ------------------
    if person_type or age_category:
        recipient_phrase = get_recipient_phrase(person_type, age_category)
        if recipient_phrase:
            message_parts.append(recipient_phrase)
    
    # ------------------ ุฅุถุงูุฉ ุงูุงูุชูุงูุงุช ------------------
    if interests:
        interests_phrase = get_interests_phrase(interests)
        if interests_phrase:
            message_parts.append(interests_phrase)
    
    # ------------------ ุฅุถุงูุฉ ูุทุงู ุงูุณุนุฑ ------------------
    if price_range:
        price_phrase = get_price_phrase(price_range, response_style)
        if price_phrase:
            message_parts.append(price_phrase)
    
    # ------------------ ุฅุถุงูุฉ ุงูุนูุงูุฉ ูุน ุงููุณุชูู ------------------
    if relationship:
        relationship_phrase = get_relationship_phrase(relationship)
        if relationship_phrase:
            message_parts.append(relationship_phrase)
    
    # ------------------ ุฅุถุงูุฉ ุงูุฅูุญุงุญ ุฃู ุงูุถุฑูุฑุฉ ------------------
    if urgency:
        urgency_phrase = get_urgency_phrase(urgency)
        if urgency_phrase:
            message_parts.append(urgency_phrase)
    
    # ------------------ ุฅุถุงูุฉ ุงูุชุฎุตูุต ุจูุงุกู ุนูู ุงููุดุชุฑูุงุช ุงูุณุงุจูุฉ ------------------
    if return_customer and previous_purchases:
        history_phrase = get_purchase_history_phrase(previous_purchases)
        if history_phrase:
            message_parts.append(history_phrase)
    
    # ุฏูุฌ ูู ุฃุฌุฒุงุก ุงูุฑุณุงูุฉ
    return " ".join(message_parts)


def build_greeting(time_of_day: str, user_name: Optional[str], return_customer: bool, response_style: str) -> Optional[str]:
    """ุจุชุจูู ุชุญูุฉ ููุงุณุจุฉ ุญุณุจ ููุช ุงูููู ูุงููุณุชุฎุฏู"""
    # ุงุญุชูุงู ุฅุถุงูุฉ ุชุญูุฉ (ูุด ูู ูุฑุฉ)
    if random.random() < 0.7:
        # ุชุญูุงุช ุญุณุจ ููุช ุงูููู
        time_greetings = {
            'ุตุจุงุญ': ['ุตุจุงุญ ุงูุฎูุฑ', 'ุตุจุงุญ ุงููู', 'ุตุจุงุญู', 'ุตุจุงุญ ุงูููุฑ'],
            'ุธูุฑ': ['ุธูุฑ ุงูุฎูุฑ', 'ูุณุนุฏ ุฃููุงุชู', 'ูุงู', 'ุฃููุงู ุจูู'],
            'ูุณุงุก': ['ูุณุงุก ุงูุฎูุฑ', 'ูุณุงุก ุงููู', 'ูุณุงุก ุงูููุฑ', 'ูุณุงุก ุงูุณุนุงุฏุฉ'],
            'ููู': ['ูุณุงุก ุงูุฎูุฑ', 'ูููุฉ ุณุนูุฏุฉ', 'ุฃููุงู ุจูู', 'ูุงู']
        }
        
        # ุงุฎุชูุงุฑ ุชุญูุฉ ููุงุณุจุฉ
        greeting = random.choice(time_greetings.get(time_of_day, ['ุฃููุงู ุจูู']))
        
        # ุฅุถุงูุฉ ุงุณู ุงููุณุชุฎุฏู ูู ููุฌูุฏ
        if user_name:
            # ุชูููุน ุทุฑููุฉ ุงูุชุญูุฉ ุจุงูุงุณู
            name_variations = [
                f" ูุง {user_name}",
                f" {user_name}",
                f" ูุง ุจุงุดุง {user_name}",
                f" ูุง ุญุจูุจ ููุจู {user_name}" if response_style in ['ุญูุงุณู', 'ูุฏูุฏ'] else f" {user_name}"
            ]
            greeting += random.choice(name_variations)
        elif return_customer:
            greeting += " ูุง ุจุงุดุง"
        
        # ุฅุถุงูุฉ ุนูุงูุฉ ุชุนุฌุจ ุฃู ูุง ุญุณุจ ุงูููุท
        if response_style in ['ุญูุงุณู', 'ูุฑุญ']:
            greeting += "! "
        else:
            greeting += ". "
            
        return greeting
    return None


def get_products_intro(products_count: int, response_style: str) -> str:
    """
    ุงุฎุชูุงุฑ ููุฏูุฉ ููุงุณุจุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช ูุฃุณููุจ ุงูุฑุฏ
    """
    # ุชุนุจูุฑุงุช ุงูุจุฏุงูุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช ูููุท ุงูุฑุฏ
    intros_by_style = {
        'ุญูุงุณู': {
            'ูููู': [
                "ุฌุจุชูู ุฃุญูู ูุงู ุญุงุฌุฉ",
                "ุดูู ุฃุฑูุน ุงุฎุชูุงุฑุงุช",
                "ุนูุฏูุง ุชุญู ูุชุนุฌุจู ุฃูู",
                "ุฏูู ุงุฌูุฏ ูุงู ุงุฎุชูุงุฑ ููุฎููู ูุจุณูุท"
            ],
            'ูุซูุฑ': [
                "ุฌุจุชูู ููุฒ ูู ุงูุงุฎุชูุงุฑุงุช ุงูุฌุงูุฏุฉ",
                "ุดูู ุงูุฑูุนุฉ ุฏู ูููุง",
                "ุนูุฏูุง ูุฌููุนุฉ ูุงุฑ ูุชุนุฌุจู ุฌุฏูุง",
                "ุฏู ุชุดูููุฉ ุชุฌูู ุจุฌุฏ!"
            ]
        },
        'ูุฏูุฏ': {
            'ูููู': [
                "ุฌูุนุชูู ูุงู ุญุงุฌุฉ ุญููุฉ",
                "ุดูู ุฏูู ูุฏู",
                "ุนูุฏู ูุงู ุงูุชุฑุงุญ ููุนุฌุจูู",
                "ูู ูุงู ุญุงุฌุฉ ูุทููุฉ ูุฏู"
            ],
            'ูุซูุฑ': [
                "ุฌุจุชูู ูุฌููุนุฉ ุฌูููุฉ ูุดูู",
                "ุดูู ุงูุฌูุงู ุฏู ููู",
                "ุนูุฏูุง ุงุฎุชูุงุฑุงุช ูุชูุฑ ูุชูุฑุญู",
                "ุฏู ุชุดูููุฉ ูููุง ุฐูู ูุฃูุงูุฉ"
            ]
        },
        'ูุฑุญ': {
            'ูููู': [
                "ุจุต ุจุต ุฏูู ุนุณู ุฃูู!",
                "ุดูู ุดูู ุงูุญุงุฌุงุช ุงูุญููุฉ ุฏู",
                "ูุง ูุงุฏ ุดูู ุงูุชุญู ุฏู",
                "ุฏู ุฃุญูู ูู ุนูููู ุทุจุนุงู ๐"
            ],
            'ูุซูุฑ': [
                "ุฃูุจุงุงุง! ุดูู ุงูุฎูุฑ ุงููุชูุฑ ุฏู!",
                "ูุงุงุงู! ูู ุฏู ุนุดุงูู ูุง ุจุงุดุง!",
                "ูุชุฑ ุฎูุฑูุง ุตุญุ ุจุต ูู ุฏูู!",
                "ููุฏุฑุชุด ุฃูุงููุ ุฌุจุชูู ูู ุฏู!"
            ]
        },
        'ูุณุงุนุฏ': {
            'ูููู': [
                "ุงุฎุชุฑุชูู ุจุนูุงูุฉ ูุงู ุงูุชุฑุงุญ",
                "ุดูู ุงูุญุงุฌุงุช ุฏู ูููู ุชูุงุณุจู",
                "ุจูุงุกู ุนูู ุทูุจูุ ุฏูู ุฃูุถู ุงุฎุชูุงุฑุงุช",
                "ุฏู ูุงู ุญุงุฌุฉ ุจุชูุงุณุจ ุงููู ุจุชุฏูุฑ ุนููู"
            ],
            'ูุซูุฑ': [
                "ูุชูุงูู ุถูู ุงููุฌููุนุฉ ุฏู ูู ุงููู ูุญุชุงุฌู",
                "ุฏู ุฃูุถู ููุชุฌุงุช ุชูุงุณุจ ุทูุจู",
                "ุฌูุนุชูู ุงุฎุชูุงุฑุงุช ูุชููุนุฉ ุจุชูุงุณุจ ุงุญุชูุงุฌุงุชู",
                "ุฏู ูุงููุฉ ุดุงููุฉ ูู ุงูููุชุฌุงุช ุงููู ุดุจู ุงููู ุทูุจุชู"
            ]
        },
        'ุนููู': {
            'ูููู': [
                "ุฅููู ูุฐู ุงูุงุฎุชูุงุฑุงุช",
                "ูุฌุฏุช ูุฐู ุงูููุชุฌุงุช ูู",
                "ูุฐู ุจุนุถ ุงูุงูุชุฑุงุญุงุช ุงูููุงุณุจุฉ",
                "ูููุง ููู ุฃูุถู ุงูููุชุฌุงุช ุงููุชููุฑุฉ"
            ],
            'ูุซูุฑ': [
                "ุฅููู ูุฌููุนุฉ ูุชูุงููุฉ ูู ุงูููุชุฌุงุช",
                "ูุฐู ูุงุฆูุฉ ุดุงููุฉ ุจุงูุงุฎุชูุงุฑุงุช ุงููุชุงุญุฉ",
                "ุงูุงุฎุชูุงุฑุงุช ุงูุชุงููุฉ ุชูุจู ูุชุทูุจุงุชู",
                "ูุฌุฏุช ูู ูุฐู ุงููุฌููุนุฉ ุงููุชููุนุฉ"
            ]
        }
    }
    
    # ุงุฎุชูุงุฑ ุงูุชุญูุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช (ูููู ุฃู ูุซูุฑ)
    if products_count <= 3:
        category = 'ูููู'
    else:
        category = 'ูุซูุฑ'
    
    # ูู ุญุงูุฉ ุนุฏู ูุฌูุฏ ุงูููุท ุงููุญุฏุฏุ ูุณุชุฎุฏู ุงูููุท 'ูุณุงุนุฏ' ุงูุชุฑุงุถููุง
    style = response_style if response_style in intros_by_style else 'ูุณุงุนุฏ'
    
    return random.choice(intros_by_style[style][category])


def get_occasion_phrase(occasion: str, response_style: str) -> Optional[str]:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ููููุงุณุจุฉ ูุน ูุฑุงุนุงุฉ ุฃุณููุจ ุงูุฑุฏ"""
    # ุนุจุงุฑุงุช ุงูููุงุณุจุงุช ุญุณุจ ุฃุณููุจ ุงูุฑุฏ
    occasion_phrases_by_style = {
        'ุญูุงุณู': {
            'ุนูุฏ ูููุงุฏ': [
                "ูุชุฎูู ุนูุฏ ุงููููุงุฏ ูุด ููุชูุณู ุฃุจุฏูุง",
                "ููุฎูู ุงูููู ุงููุจูุฑ ุฏู ุฅูุณุชุฑุง ุณุจูุดูุงู",
                "ูุชุจูุฑ ุจููู ุตุงุญุจ ุนูุฏ ุงููููุงุฏ ุจุฌุฏ",
                "ูุณุชุงูููุง ุฃุฌูุฏ ุงุญุชูุงู ุจุนูุฏ ุงููููุงุฏ"
            ],
            'ุฒูุงุฌ': [
                "ูููุฑุญุฉ ุงููุจูุฑุฉ ุฏู ููุจููุง ุชุญูุฉ",
                "ููุถูููุง ููุณุฉ ูุจูุฑุฉ ููุนุฑุณุงู",
                "ูุณุชูู ุงููุฑุญุฉ ุฏู ูุณุชุงูู ูุฏุงูุง ุฎูุงููุฉ",
                "ูุญุฏุด ูููุณู ุงููุฏูุฉ ุฏู ุฃุจุฏูุง"
            ],
            'ุชุฎุฑุฌ': [
                "ุชููู ุจุงูุฅูุฌุงุฒ ุงููุจูุฑ ุฏู",
                "ุนุดุงู ุชููู ูุฑุญุฉ ุงูุชุฎุฑุฌ ุจุดูู ูุซุงูู",
                "ููุญุชูููุง ุจูุฌุงุญู ุงูุจุงูุฑ",
                "ุนุดุงู ููุชูุฑ ุงูููู ุฏู ุทูู ุงูุนูุฑ"
            ],
            'ููููุฏ ุฌุฏูุฏ': [
                "ููุจูุจู ุงูุฌููู ูุชุจูู ุฑูุนุฉ",
                "ูููุฑุญูุง ุงูุฃูู ูุงูููููุฏ ุงูุฌุฏูุฏ",
                "ููุจููุง ุฃุญูู ุจุฏุงูุฉ ููุจูุจู",
                "ููุงุฎุฏูุง ุจุงููู ูู ุงูุฒุบูุทุท ุงูุฌุฏูุฏ"
            ],
            'ุฎุทูุจุฉ': [
                "ููุจูุฑูุง ุงููุฎุทูุจูู ุจุฌุฏ",
                "ููุนูููุง ููุงุฌุฃุฉ ูุด ูุชุชูุณู",
                "ููุจููุง ุฃุฌูู ูุฏูุฉ ูุงูุฎุทูุจุฉ ุฏู",
                "ุนุดุงู ููุฑุญูุง ุจููุง ูููุชูุฑููุง ุฏุงูููุง"
            ]
        },
        'ูุฏูุฏ': {
            'ุนูุฏ ูููุงุฏ': [
                "ุชุณุนุฏ ุตุงุญุจ ุนูุฏ ุงููููุงุฏ",
                "ุชุญูู ุจููุง ุงูุงุญุชูุงู ุงูุฌููู ุฏู",
                "ุชุถูู ุจูุฌุฉ ููููุงุณุจุฉ ุงูุญููุฉ ุฏู",
                "ุชุฎูููุง ุฐูุฑู ุญููุฉ"
            ],
            'ุฒูุงุฌ': [
                "ุชูุงุณุจ ุงููุฑุญุฉ ุงููุจูุฑุฉ ุฏู",
                "ุชุณุนุฏ ููุจ ุงูุนุฑูุณูู",
                "ุชุนุจุฑ ุนู ูุดุงุนุฑู ุงูุฌูููุฉ ูููู",
                "ุชููู ุจุฏุงูุฉ ุญููุฉ ูุญูุงุชูู"
            ],
            'ุชุฎุฑุฌ': [
                "ุชูุงูุฆ ุงูุชุนุจ ูุงููุฌููุฏ",
                "ุชููู ูุฑุญุฉ ุงูุชุฎุฑุฌ",
                "ุชูุงุณุจ ุงููุฌุงุญ ุงููุจูุฑ ุฏู",
                "ุชููู ูุฏูุฉ ุนูููุฉ ูููุณุชูุจู"
            ],
            'ููููุฏ ุฌุฏูุฏ': [
                "ููุจูุจู ุงููุทูู ูุงูุฃูู",
                "ุชูุฑุญ ููุจ ุงูุฃุณุฑุฉ ุงูุฌุฏูุฏุฉ",
                "ุชูุงุณุจ ุงูููููุฏ ุงูุตุบูุฑ",
                "ุชููู ูููุฏุฉ ูุฌูููุฉ ููุจูุจู"
            ],
            'ุฎุทูุจุฉ': [
                "ุชุณุนุฏ ุงููุฎุทูุจูู",
                "ุชููู ุจุฏุงูุฉ ุญููุฉ ูุญูุงุชูู",
                "ุชูุงุณุจ ูุฑุญุฉ ุงูุฎุทูุจุฉ",
                "ุชุนุจุฑ ุนู ุชูููุงุชู ุงูุทูุจุฉ ูููู"
            ]
        },
        'ูุฑุญ': {
            'ุนูุฏ ูููุงุฏ': [
                "ุชุฎููู ูุทูุฑ ูู ุงููุฑุญุฉ ๐",
                "ุชูุฑุชู ุนูุฏ ุงููููุงุฏ ูุฑุชูุฉ",
                "ุชุฎููู ุนูุฏ ูููุงุฏ ุจุฑุนุจููู ุจุฌุฏ",
                "ูุบูุถ ุนูููู ููุทูู ุงูุดููุน ููุชูุงุฌุฆ ๐"
            ],
            'ุฒูุงุฌ': [
                "ุชุฎูู ุงูุนุฑูุณูู ูุชูุทุทูุง ูู ุงููุฑุญุฉ",
                "ุจุต ููุทูุนููู ูุฑูู ูู ูุชุฑ ูุง ูููุฑุญูุง ๐",
                "ูููุถููุง ูุจุงุฑููุง ููู ุทูู ุงูุนูุฑ",
                "ุนูุฏู ูุฑุตุฉ ุชูุณุจ ุฏุนูุงุช ุงูุนุฑุงูุณ ๐คญ"
            ],
            'ุชุฎุฑุฌ': [
                "ุชุฎููู ูุฑูุต ุนูู ุงูุณูู ูู ุงููุฑุญุฉ",
                "ุฃุฎูุฑูุง ุฎูุต ุฏุฑุงุณุฉ ูููุงุฎุฏ ูุฏูุฉ ููุงู!",
                "ุชุญูู ุงููุงุจุฉ ุจุนุฏ ุณููู ุงููุฐุงูุฑุฉ ุงููุฑุนุจุฉ",
                "ุงูุจุณ ุทุฑุญุฉ ุงูุชุฎุฑุฌ ูุงูุฑุญ ุจุงููุฏูุฉ ๐"
            ],
            'ููููุฏ ุฌุฏูุฏ': [
                "ุงูุจูุจู ูุณู ูุด ูุงูู ุญุงุฌุฉ ุจุณ ุงูุฃูู ูููุฑุญูุง ๐ถ",
                "ุชุฎูู ุงูุจูุจู ูุถุญู (ูุน ุฅูู ุงุตูุงู ูุด ุนุงุฑู ูู ููู)",
                "ุงูุจูุจู: ุฃูุง ุฅูู ุงููู ุฌุงุจูู ููุงุ ุงููุฏูุฉ: ุฃูุง!",
                "ุชูุงุณุจ ุงูุฒููุฉ ุงูุฌุฏูุฏุฉ ุงููู ููุง ูููุง ุฏูููุชู ๐คช"
            ],
            'ุฎุทูุจุฉ': [
                "ุชุฎูููู ูุจุตูุง ูุจุนุถ ููููููุง: ุงุชุฌูุฒูุง ุตุญ!",
                "ูุทูุนูุง ุงูุฏุจู ูููุจุณูุง ุงููุฏุงูุง ๐",
                "ุชุถูู ุฅููู ูุด ูููุณุฎูุง ุงูุฎุทูุจุฉ ุจุนุฏ ูุง ูุดููููุง",
                "ุชุฎูู ูู ุงููุงุณ ุชุบูุฑ ูู ุงููุฎุทูุจูู ๐"
            ]
        },
        'ูุณุงุนุฏ': {
            'ุนูุฏ ูููุงุฏ': [
                "ููุงุณุจุฉ ุชูุงููุง ููุงุญุชูุงู ุจุนูุฏ ุงููููุงุฏ",
                "ุชู ุงุฎุชูุงุฑูุง ุฎุตูุตูุง ูููุงุณุจุฉ ุนูุฏ ุงููููุงุฏ",
                "ุชูุงุณุจ ูุชุทูุจุงุช ูุฏูุฉ ุนูุฏ ุงููููุงุฏ",
                "ุชุฌูุน ุจูู ุงูุฌูุงู ูุงููุงุฆุฏุฉ ูุตุงุญุจ ุนูุฏ ุงููููุงุฏ"
            ],
            'ุฒูุงุฌ': [
                "ุชูุงุณุจ ุงุญุชูุงุฌุงุช ุงูุฒูุฌูู ุงูุฌุฏุฏ",
                "ุนูููุฉ ููููุฏุฉ ููุญูุงุฉ ุงูุฒูุฌูุฉ ุงูุฌุฏูุฏุฉ",
                "ุชู ุงุฎุชูุงุฑูุง ุจุนูุงูุฉ ูููุงุณุจุฉ ุงูุฒูุงู",
                "ุชุณุงุนุฏ ูู ุจุฏุก ุญูุงุฉ ุฒูุฌูุฉ ุณุนูุฏุฉ"
            ],
            'ุชุฎุฑุฌ': [
                "ุชูุงุณุจ ุงูุฎุฑูุฌ ุงูุฌุฏูุฏ ูุทููุญุงุชู",
                "ุชุณุงุนุฏู ูู ุจุฏุงูุฉ ุญูุงุชู ุงูุนูููุฉ",
                "ููุงุณุจุฉ ูููุฑุญูุฉ ุงูุฌุฏูุฏุฉ ุจุนุฏ ุงูุชุฎุฑุฌ",
                "ุชูุซู ุงุณุชุซูุงุฑูุง ุฌูุฏูุง ููุณุชูุจูู"
            ],
            'ููููุฏ ุฌุฏูุฏ': [
                "ูุตููุฉ ูุฑุงุญุฉ ูุฑุนุงูุฉ ุงูููููุฏ ุงูุฌุฏูุฏ",
                "ุชุณุงุนุฏ ุงูุฃูู ูู ุงูุนูุงูุฉ ุจุงูุทูู",
                "ุขููุฉ ูููุงุณุจุฉ ููุฃุทูุงู ุงูุฑุถุน",
                "ุชุฌูุน ุจูู ุงูุฌูุงู ูุงููุงุฆุฏุฉ ููุฃุณุฑุฉ ุงูุฌุฏูุฏุฉ"
            ],
            'ุฎุทูุจุฉ': [
                "ุชูุงุณุจ ูุฑุญูุฉ ุงูุฎุทูุจุฉ ูุงูุชุฌููุฒ ููุฒูุงุฌ",
                "ุชุนุจุฑ ุนู ุชูุงููู ูููุฎุทูุจูู ุจุดูู ุนููู",
                "ุชุณุงุนุฏูู ูู ุงูุชุฎุทูุท ููุณุชูุจููู",
                "ุชุจูู ุฐูุฑู ุฌูููุฉ ูููุงุณุจุฉ ุงูุฎุทูุจุฉ"
            ]
        },
        'ุนููู': {
            'ุนูุฏ ูููุงุฏ': [
                "ููุงุณุจุฉ ูุนูุฑ ูุฐูู ุตุงุญุจ ุนูุฏ ุงููููุงุฏ",
                "ุชุฌูุน ุจูู ุงููููุฉ ุงูุนูููุฉ ูุงูุนุงุทููุฉ",
                "ุชุฏูู ุทูููุงู ูุฐูุฑู ููููุงุณุจุฉ",
                "ุชููุฑ ูููุฉ ุฌูุฏุฉ ููุงุจู ุงูุณุนุฑ"
            ],
            'ุฒูุงุฌ': [
                "ูููุฏุฉ ููููุฒู ุงูุฌุฏูุฏ",
                "ุชูุงุณุจ ุงูุจุฏุงูุฉ ุงูุฌุฏูุฏุฉ ููุฒูุฌูู",
                "ุชููุฑ ุงุญุชูุงุฌุงุช ุฃุณุงุณูุฉ ููุญูุงุฉ ุงูุฒูุฌูุฉ",
                "ุงุณุชุซูุงุฑ ุฌูุฏ ูููุณุชูุจู ุงููุดุชุฑู"
            ],
            'ุชุฎุฑุฌ': [
                "ูููุฏุฉ ููุญูุงุฉ ุงูุนูููุฉ ุงููุงุฏูุฉ",
                "ุชูุงุณุจ ุงููุฑุญูุฉ ุงูููููุฉ ุงูุฌุฏูุฏุฉ",
                "ุชุณุงุนุฏ ูู ุชุญููู ุงููุฌุงุญ ุงููููู",
                "ุชูุซู ุจุฏุงูุฉ ุฌูุฏุฉ ูููุณุงุฑ ุงููููู"
            ],
            'ููููุฏ ุฌุฏูุฏ': [
                "ุชูุจู ุงุญุชูุงุฌุงุช ุงูุทูู ุงูุฌุฏูุฏ",
                "ุชุณุงุนุฏ ูู ุฑุนุงูุฉ ุงูููููุฏ ุจุดูู ุนููู",
                "ุตููุช ุฎุตูุตูุง ููุฃุทูุงู ุงูุฑุถุน",
                "ุชุฏูู ููุชุฑุฉ ุทูููุฉ ูุน ููู ุงูุทูู"
            ],
            'ุฎุทูุจุฉ': [
                "ุชุณุงุนุฏ ูู ุงูุชุฌููุฒ ููุญูุงุฉ ุงููุดุชุฑูุฉ",
                "ุชููุฑ ูููุฉ ููุงุณุจุฉ ููุฏูุฉ ุฎุทูุจุฉ",
                "ุนูููุฉ ููููุฏุฉ ููุฒูุฌูู ุงููุณุชูุจูููู",
                "ุชูุงุณุจ ูุชุทูุจุงุช ูุฑุญูุฉ ุงูุฎุทูุจุฉ"
            ]
        }
    }
    
    # ุงูุจุญุซ ุนู ุงูููุงุณุจุฉ ูุงูุนุจุงุฑุฉ ุงูููุงุณุจุฉ
    for key in occasion_phrases_by_style.get(response_style, occasion_phrases_by_style['ูุณุงุนุฏ']):
        if key in occasion.lower():
            return random.choice(occasion_phrases_by_style.get(response_style, occasion_phrases_by_style['ูุณุงุนุฏ'])[key])
    
    # ูู ูููุด ููุงุณุจุฉ ูุญุฏุฏุฉ ูู ุงููุงููุณ
    return f"ููุงุณุจุฉ ูู{occasion}"


def get_recipient_phrase(person_type: Optional[str], age_category: Optional[str]) -> Optional[str]:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ูููุน ุงูุดุฎุต ููุฆุชู ุงูุนูุฑูุฉ"""
    if person_type and age_category:
        # ุชูููุน ุงูุนุจุงุฑุงุช ุญุณุจ ุงูููุน ูุงูุนูุฑ ูุนูุง
        combined_phrases = [
            f"ููุงุณุจุฉ ูู{person_type} ูู {age_category}",
            f"ุฎุตูุตูุง ูู{person_type} ูู ุณู ุงูู{age_category}",
            f"ูุซุงููุฉ ูู{person_type} ุถูู ูุฆุฉ {age_category}",
            f"ุชูุงุณุจ {person_type} ุงููู ูู ูุฑุญูุฉ {age_category}"
        ]
        return random.choice(combined_phrases)
    elif person_type:
        # ุนุจุงุฑุงุช ูุฎุตุตุฉ ุญุณุจ ุงูููุน ููุท
        type_phrases = {
            'ุจูุช': ["ููุจูุงุช ุจุณ", "ุชูุงุณุจ ุงูุจููุชุงุช", "ุญุตุฑููุง ููุจูุงุช ุงูุดูู"],
            'ููุฏ': ["ููุฃููุงุฏ ุงูููู", "ุฎุตูุตูุง ููุดุจุงุจ", "ุชูุงุณุจ ุงูุฑุฌุงูุฉ ุจุณ"],
            'ุณุช': ["ููุณุชุงุช ุงูุฐูู", "ุชูุงุณุจ ุงููุฏุงูุงุช", "ููุณูุฏุงุช ุงูุฃูููุงุช"],
            'ุฑุงุฌู': ["ููุฑุฌุงูุฉ ุจุณ", "ุชูุงุณุจ ุงูุฑุฌุงูุฉ ุงูุฌุฏุนุงู", "ูุฏุงูุง ุฑุฌุงูู ุฎุงูุต"],
            'ุฒูุฌุฉ': ["ููุฑุงุชู ุงูุบุงููุฉ", "ุชุณุนุฏ ุงูุฒูุฌุฉ", "ุชูุงุณุจ ุงูุณุช ุงููุจูุฑุฉ"],
            'ุฒูุฌ': ["ูุฌูุฒู ุงูุบุงูู", "ุชุณุนุฏ ุงูุฒูุฌ", "ุชูุงุณุจ ุงูุฑุงุฌู ุจุชุงุนู"]
        }
        
        # ุงูุจุญุซ ุนู ูููุงุช ููุชุงุญูุฉ ูู ุงูููุน
        for key in type_phrases:
            if key in person_type.lower():
                return random.choice(type_phrases[key])
        
        # ูู ูููุด ููุน ูุญุฏุฏ ูู ุงููุงููุณ
        return f"ููุงุณุจุฉ ูู{person_type}"
        
    elif age_category:
        # ุนุจุงุฑุงุช ูุฎุตุตุฉ ุญุณุจ ุงูุนูุฑ ููุท
        age_phrases = {
            'ุฑุถุน': ["ููุจูุจููุงุช ุงูุตุบูุฑุฉ", "ููุงุณุจุฉ ููููุงููุฏ ุงูุฌุฏุฏ", "ุชูุงุณุจ ุงูุฑุถุน"],
            'ุฃุทูุงู ุตุบูุฑูู': ["ููุฃุทูุงู ุงูุตุบูุฑูู", "ููุงุณุจุฉ ููุฃุทูุงู ุชุญุช 5 ุณููู", "ููุฒุบุงููู ุงูุญูููู"],
            'ุฃุทูุงู': ["ููุงุณุจุฉ ููุฃุทูุงู", "ุงูุฃุทูุงู ููุญุจููุง ุฃูู", "ูุชูุฑุญ ููุจ ุฃู ุทูู"],
            'ูุฑุงูููู': ["ูููุฑุงูููู ุงูุนุตุฑููู", "ุงูุดุจุงุจ ุงูุตุบูุฑ ููุนุดููุง", "ุชูุงุณุจ ุงููุฑุงูููู"],
            'ุดุจุงุจ': ["ููุดุจุงุจ ุงูุนุตุฑู", "ุชูุงุณุจ ุงูุดุจุงุจ ุงููุดูุท", "ุนุตุฑูุฉ ูููุงุณุจุฉ ููุดุจุงุจ"],
            'ุจุงูุบูู': ["ุชูุงุณุจ ุงูุจุงูุบูู", "ูููุงุณ ุงููุงุถุฌุฉ", "ูุซุงููุฉ ูููุจุงุฑ"],
            'ูุชูุณุทู ุงูุนูุฑ': ["ููุงุณุจุฉ ููุชูุณุทู ุงูุนูุฑ", "ุชูุงุณุจ ุงููุงุณ ูู ุฃุญุณู ุณู", "ูููุงุณ ุงููู ุนุฏุช ุงูุดุจุงุจ ุดููุฉ"],
            'ูุจุงุฑ ุงูุณู': ["ููุงุณุจุฉ ููุจุงุฑ ุงูุณู", "ุณููุฉ ุงูุงุณุชุฎุฏุงู ูููุจุงุฑ", "ุชุฑุงุนู ุงุญุชูุงุฌุงุช ูุจุงุฑ ุงูุณู"],
            'ูุณููู': ["ูุตููุฉ ุจุนูุงูุฉ ูููุณููู", "ูุฑูุญุฉ ูุนูููุฉ ูููุณููู", "ุชุฑุงุนู ุฎุตูุตูุฉ ุงููุณููู"]
        }
        
        # ุงูุจุญุซ ุนู ุงูุนูุฑ ุงูููุงุณุจ
        for key in age_phrases:
            if key == age_category:
                return random.choice(age_phrases[key])
        
        # ูู ูููุด ุนูุฑ ูุญุฏุฏ ูู ุงููุงููุณ
        return f"ููุงุณุจุฉ ููุฆุฉ ุงูู{age_category}"
    
    return None


def get_interests_phrase(interests: List[str]) -> Optional[str]:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ููุงูุชูุงูุงุช"""
    if not interests:
        return None
        
    # ุจูุงุก ุงูุฑุณุงูุฉ ุญุณุจ ุนุฏุฏ ุงูููุชุฌุงุช
    if products_count == 0:
        message_parts.append("ูููุด ููุชุฌุงุช ููุงุณุจุฉ ุฏูููุชู.")
    elif products_count == 1:
        message_parts.append("ูููุชูู ุงุฎุชูุงุฑ ูุงุญุฏ ููุชุงุฒ!")
    elif products_count <= 3:
        message_parts.append(f"ุฏูู ุฃุฌูุฏ {products_count} ุงุฎุชูุงุฑุงุช ูููู ุชุนุฌุจู!")
    else:
        message_parts.append(f"ุฏูู {products_count} ูุฏุงูุง ูุชููุนุฉ ุชูุฏุฑ ุชุฎุชุงุฑ ูููู!")

    # ุชุฎุตูุต ุงูุฑุณุงูุฉ ุญุณุจ ุงูุงูุชูุงูุงุช ุฃู ุงููุณู
    if interests:
        interests_ar = [translate_category(i) for i in interests]
        message_parts.append(f"ููุงุณุจุฉ ููู ุจูุญุจ {', '.join(interests_ar)}.")
    elif person_type:
        message_parts.append(f"ููุงุณุจุฉ ูู {person_type}.")
    elif occasion:
        message_parts.append(f"ููุงุณุจุฉ ูู {occasion}.")

    # ูู ููู ุฃูุณุงู ุฃู subCategory ูู ุงูููุชุฌุงุชุ ุฃุถููุง ุจุงูุนุฑุจู ููุท
    # ูุซุงู: ูู ุงูููุชุฌ ุงูุฃุณุงุณู ูู ูุฆุฉ "watches"ุ ุงุฐูุฑ "ุณุงุนุงุช" ููุท
    # (ุชุญุณูู ุฅุถุงูู: ูู ููู ุฃูุซุฑ ูู ูุณู ูู ุงููุชุงุฆุฌุ ุงุฐูุฑูู ุจุงูุนุฑุจู)
    # ูุฐุง ุงูุฌุฒุก ุงุฎุชูุงุฑู ููููู ุชูุณูุนู ุญุณุจ ุงูุญุงุฌุฉ
    if categories:
        categories_ar = [translate_category(c) for c in categories]
        message_parts.append(f"ููุงุณุจุฉ ูู {', '.join(categories_ar)}.")
def get_price_phrase(price_range: str, response_style: str) -> str:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ููุทุงู ุงูุณุนุฑ ูุน ูุฑุงุนุงุฉ ุฃุณููุจ ุงูุฑุฏ"""
    # ุนุจุงุฑุงุช ุงูุณุนุฑ ุญุณุจ ุฃุณููุจ ุงูุฑุฏ
    price_phrases_by_style = {
        'ุญูุงุณู': [
            f"ููู ุฏู ูู ุญุฏูุฏ {price_range} ุจุณ!",
            f"ุจุณุนุฑ ููุงุณุจ ุฌุฏูุง {price_range}",
            f"ูุจูููุฉ ูุงููุฉ ุนุงุฏูุฉ ุฌุฏูุง ({price_range})",
            f"ุจุฃุญูู ุณุนุฑ ({price_range}) ุนุดุงู ููุฑุญู"
        ],
        'ูุฏูุฏ': [
            f"ุจุณุนุฑ ููุงุณุจ ({price_range})",
            f"ุนูู ูุฏ ููุฒุงููุชู ({price_range})",
            f"ููู ุญุฏูุฏ {price_range} ุฒู ูุง ุทูุจุช",
            f"ุจุชูููุฉ ูุนูููุฉ ({price_range})"
        ],
        'ูุฑุญ': [
            f"ูุจูุงู ูุฑุด ุจุณ! ({price_range}) ูุนูู ูุชูุฑุญ ูู ุบูุฑ ูุง ุชููุณ ๐",
            f"ูู ูุทุงู {price_range} - ูุนูู ูุด ูุชุจูุน ุงููููุฉ ุนุดุงููุง",
            f"ุจุณ ูู ูุนูุงู ุชุณุชุงูู ุงูู{price_range} ุฏู ูุฒูุงุฏุฉ ููุงู",
            f"ูุณุนุฑูุง {price_range} ูุนูู ูุด ูุชุถุฑุจ ูู ุงูุญุณุงุจ ๐"
        ],
        'ูุณุงุนุฏ': [
            f"ุถูู ูุทุงู ุงูุณุนุฑ ุงููุทููุจ ({price_range})",
            f"ุจูุง ููุงุณุจ ููุฒุงููุชู ุงููุญุฏุฏุฉ ({price_range})",
            f"ุชูุน ูู ุงููุฆุฉ ุงูุณุนุฑูุฉ {price_range}",
            f"ุชูุจู ูุชุทูุจุงุช ุงูููุฒุงููุฉ ({price_range})"
        ],
        'ุนููู': [
            f"ูุชููุฑุฉ ุจุณุนุฑ {price_range}",
            f"ุชูุฏู ูููุฉ ุฌูุฏุฉ ููุงุจู {price_range}",
            f"ุชูุจู ูุชุทูุจุงุช ุงูุณุนุฑ {price_range}",
            f"ูู ุญุฏูุฏ ุงูููุฒุงููุฉ ุงููุญุฏุฏุฉ {price_range}"
        ]
    }
    
    # ุงุฎุชูุงุฑ ุนุจุงุฑุฉ ููุงุณุจุฉ ุญุณุจ ุงูููุท
    style = response_style if response_style in price_phrases_by_style else 'ูุณุงุนุฏ'
    return random.choice(price_phrases_by_style[style])


def get_relationship_phrase(relationship: str) -> Optional[str]:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ููุนูุงูุฉ ูุน ุงููุณุชูู"""
    relationship_phrases = {
        'ุตุฏูู': ["ูุตุงุญุจู ุงูููุฑุจ", "ูุฃุนุฒ ุตุฏูู", "ููุจุงุดุง ุตุงุญุจู", "ููุตุฏูู ุงูุนุฒูุฒ"],
        'ุตุฏููุฉ': ["ูุตุญุจุชู ุงูููุฑุจุฉ", "ููุตุงุญุจุฉ ุงูุนุฒูุฒุฉ", "ูุฃุนุฒ ุตุงุญุจุฉ", "ูุฃูุฑุจ ุตุฏููุฉ ุนูุฏู"],
        'ุฒูุฌ': ["ูุฌูุฒู ุงูุบุงูู", "ูุดุฑูู ุญูุงุชู", "ููุต ุงูุชูุงุญุฉ", "ููุฑุงุฌู ุจุชุงุนู"],
        'ุฒูุฌุฉ': ["ููุฑุงุชู ุงูุญุจูุจุฉ", "ูุดุฑููุฉ ุญูุงุชู", "ููุต ุงูุชูุงุญุฉ", "ููุณุช ุงููุจูุฑุฉ"],
        'ุฃุจ': ["ูุฃุจูู ุงูุนุฒูุฒ", "ูููุงูุฏ ุงููุจูุฑ", "ููุจุงุดุง ุงููุจูุฑ", "ูุฃุบูู ุฃุจ"],
        'ุฃู': ["ูุฃูู ุงูุบุงููุฉ", "ูููุงูุฏุฉ ุงูุญุจูุจุฉ", "ููุณุช ุงููุงูุฏุฉ", "ูุฃุบูู ุฃู"],
        'ุงุจู': ["ูุงุจูู ุงูุบุงูู", "ูููุฐุฉ ูุจุฏู", "ููุงุจู ุงูุนุฒูุฒ", "ูููุฑ ุนููู"],
        'ุจูุช': ["ูุจูุชู ุงูุบุงููุฉ", "ููุจููุชุฉ ุจุชุงุนุชู", "ูุญุชุฉ ูู ููุจู", "ูููุฑ ุนููู"],
        'ุฃุฎ': ["ูุฃุฎูู ุงูุนุฒูุฒ", "ููุฃุฎ ุงููุจูุฑ", "ููุฃุฎ ุงูุตุบูุฑ", "ูุฃูุฑุจ ุงููุงุณ ููู"],
        'ุฃุฎุช': ["ูุฃุฎุชู ุงูุนุฒูุฒุฉ", "ููุฃุฎุช ุงููุจูุฑุฉ", "ููุฃุฎุช ุงูุตุบูุฑุฉ", "ูุฃูุฑุจ ุงููุงุณ ููู"]
    }
    
    # ุงูุจุญุซ ุนู ุงูุนูุงูุฉ ุงูููุงุณุจุฉ
    for key in relationship_phrases:
        if key in relationship.lower():
            return random.choice(relationship_phrases[key])
    
    # ูู ูููุด ุนูุงูุฉ ูุญุฏุฏุฉ ูู ุงููุงููุณ
    return f"ูู{relationship} ุจุชุงุนู"


def get_urgency_phrase(urgency: str) -> Optional[str]:
    """ุจุชุฌูุจ ุนุจุงุฑุฉ ููุงุณุจุฉ ููุฅูุญุงุญ ุฃู ุงูุถุฑูุฑุฉ"""
    if not urgency:
        return None
        
    if any(word in urgency.lower() for word in ['ุนุงุฌู', 'ุณุฑูุน', 'ุจูุฑุฉ', 'ุงูููุงุฑุฏุฉ', 'ุงูููู']):
        urgent_phrases = [
            "ูููุงู ุนูุฏูุง ุชูุตูู ุณุฑูุน ููุตูู ุนูู ุทูู",
            "ูููุธุจุทู ูู ุชูุตูู ุฎูุงู 24 ุณุงุนุฉ",
            "ููุชูููุด ูู ููุช ุงูุชูุตููุ ูููุตู ูู ููุชู",
            "ูุทุจุนูุง ูู ุฎุฏูุฉ ุชูุตูู ุณุฑูุนุฉ ููุทูุจุงุช ุงูุนุงุฌูุฉ ุฏู",
            "ูุนูุฏูุง ุฎุฏูุฉ ุชูุตูู ุณุฑูุนุฉ ุฌุฏูุง ููู ุฒูู ูุณุชุนุฌู",
            "ูุฏู ูููุง ูุชููุฑุฉ ุญุงูููุง ููููู ุชูุตูู ุจุณุฑุนุฉ"
        ]
        return random.choice(urgent_phrases)
    return None


def get_purchase_history_phrase(previous_purchases: List) -> Optional[str]:
    """ุจุชุถูู ุนุจุงุฑุฉ ุดุฎุตูุฉ ุจูุงุกู ุนูู ุงููุดุชุฑูุงุช ุงูุณุงุจูุฉ ููุนููู"""
    if not previous_purchases or random.random() > 0.7:  # ูุด ูู ูุฑุฉ ููุณุชุฎุฏู ุงููุดุชุฑูุงุช ุงูุณุงุจูุฉ
        return None
    
    # ุนุจุงุฑุงุช ูุฎุตุตุฉ ุญุณุจ ุงูุชุงุฑูุฎ ุงูุณุงุจู
    history_phrases = [
        "ูุฃููุฏ ูุชุนุฌุจู ุฒู ุงููู ุงุดุชุฑูุชู ุงููุฑุฉ ุงููู ูุงุชุช",
        "ูุดุจู ุงููู ููุช ูุจุณูุท ุจูู ูุจู ูุฏู ุนูุฏูุง",
        "ุนูู ููุณ ูุณุชูู ุฌูุฏุฉ ูุดุชุฑูุงุชู ุงูุณุงุจูุฉ",
        "ููุชููู ูุน ูุฌููุนุชู ุงูุญููุฉ ุงููู ุนูุฏู",
        "ููุชูุงูููุง ูุชูุงููุฉ ูุน ุฐููู ุงููู ุนุฑููุงู"
    ]
    
    # ุฃุญูุงููุง ูุฐูุฑ ููุน ููุชุฌ ูุญุฏุฏ ูู ุงููุดุชุฑูุงุช ุงูุณุงุจูุฉ
    if random.random() < 0.4 and len(previous_purchases) > 0:
        # ุงูุชุฑุงุถ ุฃู previous_purchases ุนุจุงุฑุฉ ุนู ูุงุฆูุฉ ุจูุง ุฃุณูุงุก ุงูููุชุฌุงุช ุงูุณุงุจูุฉ
        sample_product = random.choice(previous_purchases)
        personalized_phrases = [
            f"ููุชูุงุณุจ {sample_product} ุงููู ุงุดุชุฑูุชู ูุจู ูุฏู",
            f"ูุฒู ูุง ุนุฌุจู {sample_product}ุ ุฏู ููุงู ูุชุนุฌุจู",
            f"ูุชูุงููุฉ ูุน {sample_product} ุจุชุงุนู"
        ]
        return random.choice(personalized_phrases)
    
    return random.choice(history_phrases)


def add_random_enhancement(message: str, context: Dict, response_style: str) -> str:
    """
    ุจุชุถูู ุชุนุจูุฑ ุนุดูุงุฆู ููุชูููุน ุฃู ูุตูุญุฉ ุฃู ุชุดุฌูุน
    """
    # ุฃููุงุน ูุฎุชููุฉ ูู ุงูุชุนุฒูุฒุงุช
    enhancements = [
        'encouragement',  # ุชุดุฌูุน ููุดุฑุงุก
        'tip',            # ูุตูุญุฉ ูููุฏุฉ
        'urgency',        # ุฅุดุนุงุฑ ุจุนุฑุถ ูุญุฏูุฏ
        'social_proof',   # ุฅุซุจุงุช ุงุฌุชูุงุนู
        'question'        # ุณุคุงู ุชูุงุนูู
    ]
    
    # ุงุฎุชูุงุฑ ููุน ุงูุชุนุฒูุฒ ุนุดูุงุฆููุง ูุน ูุฑุงุนุงุฉ ุงูููุท
    if response_style == 'ุญูุงุณู':
        weighted_enhancements = ['encouragement', 'urgency', 'social_proof', 'encouragement', 'urgency']
    elif response_style == 'ูุฏูุฏ':
        weighted_enhancements = ['encouragement', 'tip', 'question', 'question', 'tip']
    elif response_style == 'ูุฑุญ':
        weighted_enhancements = ['question', 'encouragement', 'social_proof', 'urgency', 'question']
    elif response_style == 'ูุณุงุนุฏ':
        weighted_enhancements = ['tip', 'tip', 'question', 'encouragement', 'tip']
    elif response_style == 'ุนููู':
        weighted_enhancements = ['tip', 'social_proof', 'tip', 'encouragement', 'tip']
    else:
        weighted_enhancements = enhancements
    
    enhancement_type = random.choice(weighted_enhancements)
    
    # ุนุจุงุฑุงุช ูุฎุชููุฉ ุญุณุจ ููุน ุงูุชุนุฒูุฒ
    enhancement_phrases = {
        'encouragement': [
            "ุงุชูุฑุฌ ุนูููู ูููููู ุฑุฃูู!",
            "ุดูููู ูููููู ุนุฌุจูู ููุง ุนูุฏู ููุฑุฉ ุชุงููุฉุ",
            "ุฃุชููู ุญุงุฌุฉ ูููู ุชุนุฌุจู ๐",
            "ููููู ุงููู ูุนุฌุจู ูุฃุณุงุนุฏู ุชุธุจุทู ุนูู ุทูู",
            "ูุฃูุง ูุงุซู ุฅููู ููุนุฌุจูู ุฌุฏูุง!",
            "ูุฃุถูููู ุงูุฌูุฏุฉ ูุงูุณุนุฑ ุงูููุงุณุจ",
            "ุฏูุณ ุนูู ุงููู ูุนุฌุจู ุนุดุงู ุชุดูู ุงูุชูุงุตูู",
            "ูุทุจุนูุง ูู ุถูุงู ุนูู ูู ุงูููุชุฌุงุช"
        ],
        'tip': [
            "ูุตูุญุฉ ูููุ ุดูู ุงูุชููููุงุช ุงูุฃูู ูุจู ูุง ุชุฎุชุงุฑ",
            "ูุฃูุตุญู ุชุทูุจ ุจุฏุฑู ุนุดุงู ุชุถูู ุงูุชูุตูู ูู ุงูููุช ุงูููุงุณุจ",
            "ุฎุฏ ุจุงููุ ูููู ุชุนูู ููุงุฑูุฉ ุจูููู ูู ุตูุญุฉ ุงูููุงุฑูุฉ",
            "ูู ุชุฌุงุฑุจ ุนููุงุก ูุจููุ ุฃุญุฌุงู ุงูููุชุฌุงุช ุฏู ูุธุจูุทุฉ",
            "ูุชูุณุงุด ููุงู ุชุดูู ุงูุนุฑูุถ ุงููุชุนููุฉ ุจููุง",
            "ูุตูุญุฉ ุตุบูุฑุฉ: ุฏุงูููุง ุงุทูุจ ุญุงุฌุฉ ุฒูุงุฏุฉ ุนุดุงู ุชููุฑ ูู ุงูุดุญู",
            "ุงุทูุจ ุฏูููุชู ุนุดุงู ุชูุญู ุงููุฎุฒูู"
        ],
        'urgency': [
            "ููู ุฎุตู 15% ูู ุทูุจุช ุงูููุงุฑุฏุฉ ุจุณ!",
            "ูุงููููุงุช ูุญุฏูุฏุฉุ ููุชุชุฃุฎุฑุด!",
            "ููู ูุฏูุฉ ูุฌุงููุฉ ูุน ุงูุทูุจุงุช ุงูููุงุฑุฏุฉ!",
            "ูุงุณุชูุงุฏ ูู ุงูุดุญู ุงููุฌุงูู ููุทูุจุงุช ููู 500 ุฌููู",
            "ุงูุณุนุฑ ุฏู ููุฏุฉ ูุญุฏูุฏุฉ ุจุณ!",
            "ูุนุฑุถ ุฎุงุต: ุงุดุชุฑู ูุทุนุชูู ูุงูุชุงูุชุฉ ุจูุต ุงูุณุนุฑ!"
        ],
        'social_proof': [
            "ุนููุงุกูุง ูุจุณูุทูู ุฌุฏูุง ุจุงูููุชุฌุงุช ุฏู",
            "ุงูููุฏููุงุช ุฏู ูู ุฃูุชุฑ ุงูุญุงุฌุงุช ุงููู ุงููุงุณ ุจุชุดุชุฑููุง",
            "ูุจูุนุงุช ุงูุฃุณุจูุน ุฏู ุนูููุง ูุชูุฑุฉ ุฌุฏูุง",
            "ุงูุนููุงุก ุงููู ุงุดุชุฑูุง ุฒููุง ุฑุฌุนูุง ูุดุชุฑูุง ุชุงูู",
            "ุงูุญุงุฌุงุช ุฏู ุจุชุฎูุต ุจุณุฑุนุฉ ูู ูุชุฑ ุทูุจุงุช ุงููุงุณ ุนูููุง",
            "ูู ุฃูุชุฑ ุงูููุชุฌุงุช ุฅูุฌุงุจูุฉ ูู ุชููููุงุช ุงูุนููุงุก"
        ],
        'question': [
            "ุฅูู ุฑุฃูู ููููุ",
            "ุชุญุจ ุฃุฑุดุญูู ุญุงุฌุงุช ุชุงููุฉุ",
            "ูููุช ุงููู ููุช ุจุชุฏูุฑ ุนูููุ",
            "ุนุงูุฒ ูุณุงุนุฏุฉ ูู ุงูุงุฎุชูุงุฑุ",
            "ูุญุชุงุฌ ูุนูููุงุช ุฃูุชุฑ ุนู ุฃู ููุชุฌ ููููุ",
            "ููู ุงูุชุฑุงุญ ุชุงูู ุนูุฏูุ",
            "ูุง ุชุฑู ุงูููุงุณุงุช ุฏู ููุงุณุจุฉุ"
        ]
    }
    
    # ุงุฎุชูุงุฑ ุนุจุงุฑุฉ ููุงุณุจุฉ
    selected_phrase = random.choice(enhancement_phrases[enhancement_type])
    
    # ุฅุถุงูุฉ ุงูุนุจุงุฑุฉ ููุฑุณุงูุฉ ุจุดูู ุทุจูุนู
    connector = random.choice([" ", " ู", ". "])
    return f"{message}{connector}{selected_phrase}"


def add_contextual_emojis(message: str, context: Dict) -> str:
    """
    ุชุถูู ุฅูููุฌู ููุงุณุจ ููุณูุงู ุจุดูู ูุฏุฑูุณ (ูุด ูุชูุฑ)
    """
    # ูุณุจุฉ ุงุญุชูุงููุฉ ุฅุถุงูุฉ ุฅูููุฌู
    if random.random() > 0.7:  # 70% ูุฑุตุฉ ูุฅุถุงูุฉ ุฅูููุฌู
        return message
    
    # ูุงุฆูุฉ ูู ุงูุฅูููุฌู ุญุณุจ ุงูููุงุณุจุฉ ูุงูุณูุงู
    occasion_emojis = {
        'ุนูุฏ ูููุงุฏ': ['๐', '๐', '๐', '๐', '๐ฅณ'],
        'ุฒูุงุฌ': ['๐', '๐', '๐ฐ', '๐คต', '๐'],
        'ุชุฎุฑุฌ': ['๐', '๐', '๐งโ๐', '๐จโ๐', '๐ฉโ๐'],
        'ููููุฏ ุฌุฏูุฏ': ['๐ถ', '๐ผ', '๐งธ', '๐ผ', '๐คฑ'],
        'ุฎุทูุจุฉ': ['๐', '๐', '๐', 'โค๏ธ', '๐']
    }
    
    type_emojis = {
        'ุจูุช': ['๐ง', '๐ฉ', '๐', '๐ฑโโ๏ธ'],
        'ููุฏ': ['๐ฆ', '๐จ', '๐ฑโโ๏ธ', '๐ง'],
        'ุทูู': ['๐ถ', '๐ง', '๐งธ'],
        'ุฑุฌู': ['๐จ', '๐ง', '๐จโ๐ผ'],
        'ุงูุฑุฃุฉ': ['๐ฉ', '๐ฉโ๐ผ', '๐ฑโโ๏ธ']
    }
    
    interest_emojis = {
        'ุฑูุงุถุฉ': ['โฝ', '๐', '๐โโ๏ธ', '๐๏ธโโ๏ธ', '๐โโ๏ธ'],
        'ููุณููู': ['๐ต', '๐ธ', '๐น', '๐ง', '๐ผ'],
        'ูุฑุงุกุฉ': ['๐', '๐', '๐', 'โ๏ธ'],
        'ุชูููููุฌูุง': ['๐ฑ', '๐ป', 'โ', '๐ฅ๏ธ', '๐ฎ'],
        'ุณูุฑ': ['โ๏ธ', '๐งณ', '๐๏ธ', '๐บ๏ธ', '๐๏ธ'],
        'ุทุจุฎ': ['๐ณ', '๐จโ๐ณ', '๐ฉโ๐ณ', '๐ฝ๏ธ', '๐ฅ'],
        'ูููู': ['๐จ', '๐๏ธ', '๐ญ', '๐งต', '๐ฌ']
    }
    
    # ุงุฎุชูุงุฑ ุงูุฅูููุฌู ุงูููุงุณุจ
    selected_emoji = None
    
    # ุงูุจุญุซ ูู ุงูููุงุณุจุฉ ุฃููุงู
    if context.get('occasion'):
        for key, emojis in occasion_emojis.items():
            if key in context['occasion'].lower():
                selected_emoji = random.choice(emojis)
                break
    
    # ุฅุฐุง ูู ูุฌุฏ ุฅูููุฌู ููููุงุณุจุฉุ ูุจุญุซ ูู ููุน ุงูุดุฎุต
    if not selected_emoji and context.get('type'):
        for key, emojis in type_emojis.items():
            if key in context['type'].lower():
                selected_emoji = random.choice(emojis)
                break
    
    # ุฅุฐุง ูู ูุฌุฏ ุฅูููุฌู ููููุนุ ูุจุญุซ ูู ุงูุงูุชูุงูุงุช
    if not selected_emoji and context.get('interests'):
        for interest in context['interests']:
            for key, emojis in interest_emojis.items():
                if key in interest.lower():
                    selected_emoji = random.choice(emojis)
                    break
            if selected_emoji:
                break
    
    # ุฅุฐุง ูู ูุฌุฏ ุฃู ุฅูููุฌู ููุงุณุจุ ูุณุชุฎุฏู ุฅูููุฌู ุนุงู
    if not selected_emoji:
        general_emojis = ['๐', 'โจ', '๐ฏ', '๐ฅ', 'โญ', '๐', '๐ฏ']
        selected_emoji = random.choice(general_emojis)
    
    # ุฅุถุงูุฉ ุงูุฅูููุฌู ูู ููุงูุฉ ุงูุฑุณุงูุฉ
    return f"{message} {selected_emoji}"


def get_time_of_day() -> str:
    """
    ุจุชุญุฏุฏ ููุช ุงูููู ุนุดุงู ูุถุจุท ุงูุชุญูุฉ ุจุดูู ุฃูุถู
    """
    import datetime
    hour = datetime.datetime.now().hour
    
    if 5 <= hour < 12:
        return "ุตุจุงุญ"
    elif 12 <= hour < 17:
        return "ุธูุฑ"
    elif 17 <= hour < 22:
        return "ูุณุงุก"
    else:
        return "ููู"